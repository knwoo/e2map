#!/usr/bin/python

PACKAGE = "path_tracker"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator() # 'name', 'type', 'level', 'description', 'default', 'min', 'max'

gen.add("Dummy_Path", bool_t, 0, "test tracker with generated dummy path", False)
gen.add("Dummy_Activate", bool_t, 0, "Activate to generate dummy path", False)
gen.add("Dummy_Curvature", double_t, 0, "dummy path curvature", 1.0, 0.1, 5.0)
gen.add("Dummy_Length", double_t, 0, "dummy path length ", 5, 0, 50)
path_type_enum = gen.enum([gen.const("ForwardStraight", int_t, 0, "Forward Straight Path"),
                           gen.const("BackwardStraight", int_t, 1, "Backward Straight Path"),
                           gen.const("ForwardTurnRight", int_t, 2, "Forward Turn Right Path"),
                           gen.const("ForwardTurnLeft", int_t, 3, "Forward Turn Left Path"),
                           gen.const("BackwardTurnRight", int_t, 4, "Backward Turn Right Path"),
                           gen.const("BackwardTurnLeft", int_t, 5, "Backward Turn Left Path"),
                           gen.const("ForwardInfty", int_t, 6, "Forward Infty Path"),
                           gen.const("BackwardInfty", int_t, 7, "Backward Infty Path"),
                           gen.const("ForwardRandom", int_t, 8, "Forward Infty Path"),
                           gen.const("BackwardRandom", int_t, 9, "Backward Infty Path"),
                           gen.const("ForwardTriangle", int_t, 10, "Forward Triangle Path"),
                           gen.const("ForwardSquare", int_t, 11, "Forward Square Path"),
                           gen.const("ForwardPentagon", int_t, 12, "Forward Pentagon Path"),
                           gen.const("ForwardHourglass", int_t, 13, "Forward Hourglass Path"),
                           gen.const("BackwardTriangle", int_t, 14, "Backward Triangle Path"),
                           gen.const("BackwardSquare", int_t, 15, "Backward Square Path"),
                           gen.const("BackwardPentagon", int_t, 16, "Backward Pentagon Path"),
                           gen.const("BackwardHourglass", int_t, 17, "Backward Hourglass Path"),
                           gen.const("ReturnStraight", int_t, 18, "Backward Hourglass Path"),
                           gen.const("SaveCustomPath", int_t, 19, "Save Custom Path"),
                           gen.const("CustomPath", int_t, 20, "Custom Path")],
                           "An enum to set path type")

gen.add("Dummy_Type", int_t, 0, "dummy path type", 0, 0, 20, edit_method=path_type_enum)

gen.add("verbose", bool_t, 0, "print", False)
gen.add("vis_hist", bool_t, 0, "visualization history", False)

gen.add("vel_coef", double_t, 0, "velocity coefficient", 1.0, 0.1, 4.0)
gen.add("vel_thres_coef", double_t, 0, "velocity coefficient", 1.0, 1.0, 4.0)
gen.add("average", double_t, 0, "moving avg window size", 10.0, 1, 20)

gen.add("K", int_t, 0, "number of samples", 500, 1, 3000)
gen.add("T", int_t, 0, "number of predicted timesteps", 20, 5, 50)
gen.add("n_ind_search", int_t, 0, "seach range for reference path in path", 30, 5, 100)

gen.add("DT", double_t, 0, "system timestep", 0.1, 0.05, 0.2)
gen.add("target_speed", double_t, 0, "desired vehicle velocity [m/s]", 1.0, 0.0, 5.0)
gen.add("Lam", double_t, 0, "scaling factor for noise cost", 12.0, 0.1, 100)
gen.add("Gam", double_t, 0, "scaling factor for time", 0.4, 0, 1.5)

gen.add("Cov_Lin_Vel", double_t, 0, "covariance for linear velocity", 0.06, 0, 5.0)
gen.add("Cov_Ang_Vel", double_t, 0, "covariance for angular velocity", 0.10, 0, 5.0)

gen.add("Q_Pos", double_t, 0, "state cost for position", 12.0, 0, 200.0)
gen.add("Q_Vel", double_t, 0, "state cost for velocity", 50.0, 0, 200.0)
gen.add("Q_Yaw", double_t, 0, "state cost for heading", 0.0, 0, 200.0)

gen.add("Qf_Pos", double_t, 0, "terminal cost for position", 5.0, 0, 200.0)
gen.add("Qf_Vel", double_t, 0, "terminal cost for velocity", 30.0, 0, 200)
gen.add("Qf_Yaw", double_t, 0, "terminal cost for heading", 0.0, 0, 200.0)

gen.add("R_Lin_Vel", double_t, 0, "action cost for linear velocity", 0.1, 0, 100.0)
gen.add("R_Ang_Vel", double_t, 0, "action cost for angular velocity", 0.6, 0, 100.0)

exit(gen.generate(PACKAGE, "path_tracker_node", "mppi_param"))
